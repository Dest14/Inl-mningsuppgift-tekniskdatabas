{
	"info": {
		"_postman_id": "28c73eed-ff40-45e8-b6e2-b36695c4e046",
		"name": "Book & Authors",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34738082",
		"_collection_link": "https://www.postman.com/dest14/workspace/inlmningsuppgift/collection/34738082-28c73eed-ff40-45e8-b6e2-b36695c4e046?action=share&source=collection_link&creator=34738082"
	},
	"item": [
		{
			"name": "Manuella & Automatiserade tester",
			"item": [
				{
					"name": "01 (status 200)",
					"item": [
						{
							"name": "Author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "Book",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "02 (Json)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"the response is in JSON format\", function(){\r",
											"    pm.response.to.be.json;\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03 (HTTP)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A bad request\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/bookauth",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"bookauth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "04 (Search method)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"All books should have genre 'Adventure'\", function() {\r",
											"    const books = pm.response.json(); // Assuming the response is an array of books\r",
											"    books.forEach((book) => {\r",
											"        pm.expect(book.genre).to.eql(\"Adventure\"); // Check that the genre is 'adventure'\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book?genre=Adventure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									],
									"query": [
										{
											"key": "genre",
											"value": "Adventure"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is an array with correct length\", function() {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Check if response is an array\r",
											"\r",
											"    pm.expect(response.length).to.eql(3); // Ensure the array length matches the expected limit\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book?page=1&limit=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "06 (Non english)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Correct user is returned with special characters\", function() {\r",
											"    const author = pm.response.json();\r",
											"     pm.expect(author.docs[0].firstName).to.equal(\"Kristäöå\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author?firstName=Kristäöå",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									],
									"query": [
										{
											"key": "firstName",
											"value": "Kristäöå"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "07 (Multiple test)",
					"item": [
						{
							"name": "book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						},
						{
							"name": "book 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						},
						{
							"name": "book 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "08 (Multiple tasks)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {\r",
											"    pm.response.to.have.status(201); \r",
											"    const responseBody = pm.response.json(); \r",
											"    pm.expect(responseBody).to.have.property('_id'); \r",
											"    pm.expect(responseBody).to.have.property('firstName'); \r",
											"    pm.expect(responseBody).to.have.property('lastName'); \r",
											"    pm.expect(responseBody.firstName).to.eql(\"Kristäöå\"); \r",
											"    pm.expect(responseBody.lastName).to.eql(\"Huel\"); \r",
											"    pm.globals.set(\"authorId\", responseBody._id); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"Kristäöå\",\r\n  \"lastName\": \"Huel\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and author updated\", function() {\r",
											"    pm.response.to.have.status(200); \r",
											"    const responseBody = pm.response.json(); \r",
											"    pm.expect(responseBody).to.have.property('_id'); \r",
											"    pm.expect(responseBody).to.have.property('firstName'); \r",
											"    pm.expect(responseBody).to.have.property('lastName'); \r",
											"    pm.expect(responseBody.firstName).to.eql('Kristäöå'); \r",
											"    pm.expect(responseBody.lastName).to.eql('Huel'); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"Kristäöå\",\r\n  \"lastName\": \"Huel\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/author/66de31bcf162344696ea9c1c",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author",
										"66de31bcf162344696ea9c1c"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and author removed message\", function() {\r",
											"    pm.response.to.have.status(200); // Check if the response status code is 200 (OK)\r",
											"    const responseBody = pm.response.json(); // Parse the response body as JSON\r",
											"    pm.expect(responseBody.message).to.eql(\"Event has been deleted!\"); // Assert that the message is as expected\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/author/66de31bcf162344696ea9c1c",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author",
										"66de31bcf162344696ea9c1c"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "09 (API automated test)",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and author updated\", function() {\r",
											"    pm.response.to.have.status(200); \r",
											"    const responseBody = pm.response.json(); \r",
											"    pm.expect(responseBody).to.have.property('_id'); \r",
											"    pm.expect(responseBody).to.have.property('firstName'); \r",
											"    pm.expect(responseBody).to.have.property('lastName'); \r",
											"    pm.expect(responseBody.firstName).to.eql('Kristäöå'); \r",
											"    pm.expect(responseBody.lastName).to.eql('Huel'); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"Kristäöå\",\r\n  \"lastName\": \"Huel\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/author/66de354d049f3ba62272a62f",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author",
										"66de354d049f3ba62272a62f"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 with correct author data\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    const authors = pm.response.json().docs; // Get the array of authors\r",
											"\r",
											"    // Check that we have at least one author\r",
											"    pm.expect(authors).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    // Find the specific author by ID\r",
											"    const authorIdToCheck = \"66de354d049f3ba62272a62f\"; // Replace with the ID you want to check\r",
											"    const author = authors.find(a => a._id === authorIdToCheck);\r",
											"\r",
											"    // Ensure the author was found\r",
											"    pm.expect(author).to.exist;\r",
											"\r",
											"    // Check the properties of the specific author\r",
											"    pm.expect(author.firstName).to.eql(\"Kristäöå\");\r",
											"    pm.expect(author.lastName).to.eql(\"Huel\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10",
					"item": [
						{
							"name": "author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/book",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"book"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11",
					"item": [
						{
							"name": "True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 and error message\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(pm.response.text()).to.include(\"An error occurred on the server while fetching\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author?disconnect=true",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author?disconnect=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 and error message\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.text()).to.include(\"No author found\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author?firstName=ksla",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									],
									"query": [
										{
											"key": "firstName",
											"value": "ksla"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "13",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 / 429\", function () {\r",
											"    if (pm.info.iteration < 100) {\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        pm.response.to.have.status(429);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/author",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"author"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}